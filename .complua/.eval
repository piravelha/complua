function ascii_map (...)
for i, line in pairs({...})  do
print(line)
end
end

function _serialize(value)
    if type(value) == "string" then
        return string.format("%q", value)
    end
    if type(value) == "table" then
        local mt = getmetatable(value) or {}
        local s = "setmetatable({"
        local i = 0
        for k, v in pairs(value) do
            if i > 0 then
                s = s .. ", "
            end
            s = s .. "["
                .. _serialize(k)
                .. "] ="
                .. _serialize(v)
            i = i + 1
        end
        return s .. "}, {})"
    end
    if type(value) == "function" then
        local bs = string.dump(value)
        local s = "string.char("
        for i = 1, #bs do
            if i > 1 then
                s = s .. ", "
            end
            values = values .. string.byte(bs, i)
        end
        return s .. ")"
    end
    return tostring(value)
end
local file = io.open("./.complua/.eval.temp", "w")
__expr = { (function (...)
local lines = {...};
local first = (- 1);
local starts = 0;
for i = 1, (# lines), 1 do
if (first == (- 1)) then
first = (# lines[i])

end
assert((first == (# lines[i])), ("All lines for the ascii map " .. "must be of the same length"))
for j = 1, (# lines[i]), 1 do
if (lines[i]:sub(j, j) == "s") then
starts = (starts + 1)

end
end
end
assert((starts > 0), "You need a start position ('s')")
assert((starts == 1), "You can only have one start position")
end)("xxxxxxxx", "x      x", "xxx  xxx", "x  s   x", "xxxxx  x", "x    s x", "xxxxxxxx") }
file:write(string.dump(function()
    return table.unpack(__expr)
end))
file:close()
local file = io.open("./.complua/.eval.temp.expr", "w")
file:write(_serialize(__expr))
file:close()
