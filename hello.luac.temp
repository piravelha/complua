
_G["#COMPLUA"] = _G["#COMPLUA"] or {}
_G["#COMPLUA"].serialize = function(value)
    local _serialize = _G["#COMPLUA"].serialize
    if type(value) == "string" then
        return '"' .. value .. '"'
    end
    if type(value) == "table" then
        local mt = getmetatable(value) or {}
        local s = "setmetatable({"
        local i = 0
        for k, v in pairs(value) do
            if i > 0 then
                s = s .. ", "
            end
            s = s .. "["
                .. _serialize(k)
                .. "] ="
                .. _serialize(v)
            i = i + 1
        end
        return s .. "}, {})"
    end
    if type(value) == "function" then
        local bs = string.dump(value)
        local s = "load(string.char("
        for i = 1, #bs do
            if i > 1 then
                s = s .. ", "
            end
            s = s .. string.byte(bs, i)
        end
        return s .. "))"
    end
    return tostring(value)
end


function zip (xs, ys)
local index = 0;
local __defer = {function ()
index = (index + 1);
if (index > (# xs)) then

local __defer = {nil, nil}
return unpack(__defer);

end
local __defer = {xs[index], ys[index]}
return unpack(__defer);
end}
return unpack(__defer);
end
local t1 = {1, 2, 3, 4};
local t2 = {2, 4, 6, 8};
for a, b in zip(t1, t2)  do
print(a, b);

end
